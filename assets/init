#!/bin/bash
set -e

INSTALL_DIR="/home/gitlab_ci_runner/gitlab-ci-runner"
DATA_DIR="/home/gitlab_ci_runner/data"

CI_RUNNERS_COUNT=${CI_RUNNERS_COUNT:-1}
CA_CERTIFICATES_PATH=${CA_CERTIFICATES_PATH:-$DATA_DIR/certs/ca.crt}

# create and take ownership of ${DATA_DIR}
mkdir -p ${DATA_DIR}
chown gitlab_ci_runner:gitlab_ci_runner ${DATA_DIR}

# create the builds directory
sudo -u gitlab_ci_runner -H mkdir -p ${DATA_DIR}/builds/

# create the .ssh directory
sudo -u gitlab_ci_runner -H mkdir -p ${DATA_DIR}/.ssh/

# generate deploy key
if [ ! -e ${DATA_DIR}/.ssh/id_rsa -o ! -e ${DATA_DIR}/.ssh/id_rsa.pub ]; then
  echo "Generating SSH deploy keys..."
  rm -rf ${DATA_DIR}/.ssh/id_rsa ${DATA_DIR}/.ssh/id_rsa.pub
  sudo -u gitlab_ci_runner -H ssh-keygen -t rsa -N "" -f ${DATA_DIR}/.ssh/id_rsa
fi

# make sure the ssh keys have the right ownership and permissions
chmod 600 ${DATA_DIR}/.ssh/id_rsa ${DATA_DIR}/.ssh/id_rsa.pub
chmod 700 ${DATA_DIR}/.ssh
chown -R gitlab_ci_runner:gitlab_ci_runner ${DATA_DIR}/.ssh/

cd ${INSTALL_DIR}

# configure number of runner instances
sed 's/^numprocs=1/numprocs='"${CI_RUNNERS_COUNT}"'/' -i /etc/supervisor/conf.d/runner.conf

if [ -f "${CA_CERTIFICATES_PATH}" ]; then
  echo "Updating CA certificates..."
  cp "${CA_CERTIFICATES_PATH}" /usr/local/share/ca-certificates/ca.crt
  update-ca-certificates --fresh >/dev/null 2>&1
fi

appStart () {
  
  ################## START WRAPDOCKER : Docker in Docker ##################
  CGROUP=/sys/fs/cgroup
  : {LOG:=stdio}

  [ -d $CGROUP ] || 
    mkdir $CGROUP

  mountpoint -q $CGROUP || 
    mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP || {
      echo "Could not make a tmpfs mount. Did you use -privileged?"
      exit 1
    }

  if [ -d /sys/kernel/security ] && ! mountpoint -q /sys/kernel/security
  then
      mount -t securityfs none /sys/kernel/security || {
          echo "Could not mount /sys/kernel/security."
          echo "AppArmor detection and -privileged mode might break."
      }
  fi

  # Mount the cgroup hierarchies exactly as they are in the parent system.
  for SUBSYS in $(cut -d: -f2 /proc/1/cgroup)
  do
          [ -d $CGROUP/$SUBSYS ] || mkdir $CGROUP/$SUBSYS
          mountpoint -q $CGROUP/$SUBSYS || 
                  mount -n -t cgroup -o $SUBSYS cgroup $CGROUP/$SUBSYS

          # The two following sections address a bug which manifests itself
          # by a cryptic "lxc-start: no ns_cgroup option specified" when
          # trying to start containers withina container.
          # The bug seems to appear when the cgroup hierarchies are not
          # mounted on the exact same directories in the host, and in the
          # container.

          # Named, control-less cgroups are mounted with "-o name=foo"
          # (and appear as such under /proc/<pid>/cgroup) but are usually
          # mounted on a directory named "foo" (without the "name=" prefix).
          # Systemd and OpenRC (and possibly others) both create such a
          # cgroup. To avoid the aforementioned bug, we symlink "foo" to
          # "name=foo". This shouldn't have any adverse effect.
          echo $SUBSYS | grep -q ^name= && {
                  NAME=$(echo $SUBSYS | sed s/^name=//)
                  ln -s $SUBSYS $CGROUP/$NAME
          }

          # Likewise, on at least one system, it has been reported that
          # systemd would mount the CPU and CPU accounting controllers
          # (respectively "cpu" and "cpuacct") with "-o cpuacct,cpu"
          # but on a directory called "cpu,cpuacct" (note the inversion
          # in the order of the groups). This tries to work around it.
          [ $SUBSYS = cpuacct,cpu ] && ln -s $SUBSYS $CGROUP/cpu,cpuacct
  done

  # Note: as I write those lines, the LXC userland tools cannot setup
  # a "sub-container" properly if the "devices" cgroup is not in its
  # own hierarchy. Let's detect this and issue a warning.
  grep -q :devices: /proc/1/cgroup ||
    echo "WARNING: the 'devices' cgroup should be in its own hierarchy."
  grep -qw devices /proc/1/cgroup ||
    echo "WARNING: it looks like the 'devices' cgroup is not mounted."

  # Now, close extraneous file descriptors.
  pushd /proc/self/fd >/dev/null
  for FD in *
  do
    case "$FD" in
    # Keep stdin/stdout/stderr
    [012])
      ;;
    # Nuke everything else
    *)
      eval exec "$FD>&-"
      ;;
    esac
  done
  popd >/dev/null


  # If a pidfile is still around (for example after a container restart),
  # delete it so that docker can start.
  rm -rf /var/run/docker.pid

  # If we were given a PORT environment variable, start as a simple daemon;
  # otherwise, spawn a shell as well
  if [ "$LOG" == "file" ]
  then
    docker -d &>/var/log/docker.log &
  else
    docker -d &
  fi
  ################## END WRAPDOCKER : Docker in Docker ##################
  
  echo "Starting gitlab-ci-runner..."
  if [ ! -e ${DATA_DIR}/config.yml ]; then
    if [ -n "$CI_SERVER_URL" ] && [ -n "$REGISTRATION_TOKEN" ]; then
      appSetup $CI_SERVER_URL $REGISTRATION_TOKEN
    else
      echo "WARNING: No configuration found!"
      echo "Please run app:setup or set CI_SERVER_URL and REGISTRATION_TOKEN."
      exit 1
    fi
  fi

  # remove  stale runners.pid if it exists
  sudo -u gitlab_ci_runner -H rm -rf ${INSTALL_DIR}/tmp/pids/runners.pid

  sudo -u gitlab_ci_runner -H ln -sf ${DATA_DIR}/config.yml config.yml
  exec /usr/bin/supervisord -n -c /etc/supervisor/supervisord.conf
}

appSetup () {
  sudo -u gitlab_ci_runner -H CI_SERVER_URL=$1 REGISTRATION_TOKEN=$2 bundle exec ./bin/setup
  sudo -u gitlab_ci_runner -H mv config.yml ${DATA_DIR}/config.yml
}

appHelp () {
  echo "Available options:"
  echo " app:start          - Starts the gitlab-ci server (default)"
  echo " app:setup          - Setup the runner. Interactively or by passing URL and Token as params."
  echo " app:help           - Displays the help"
  echo " [command]          - Execute the specified linux command eg. bash."
}

case "$1" in
  app:start)
    appStart
    ;;
  app:setup)
    appSetup
    ;;
  app:help)
    appHelp
    ;;
  *)
    if [ -x $1 ]; then
      $1
    else
      prog=$(which $1)
      if [ -n "${prog}" ] ; then
        shift 1
        $prog $@
      else
        appHelp
      fi
    fi
    ;;
esac

exit 0
